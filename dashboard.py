import streamlit as st
import sqlite3
import pandas as pd

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'db/car_fleet.db'

@st.cache_data
def load_data(query):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with sqlite3.connect(DB_PATH) as conn:
        return pd.read_sql_query(query, conn)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
car_info = load_data("SELECT * FROM car_info")
rides_info = load_data("SELECT * FROM rides_info")
driver_info = load_data("SELECT * FROM driver_info")
fix_info = load_data("SELECT * FROM fix_info")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.title("üöó –î–∞—à–±–æ—Ä–¥ –¢–∞–∫—Å–æ–ø–∞—Ä–∫–∞")

# –í—ã–±–æ—Ä —Å–µ–∫—Ü–∏–∏
section = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
    ["–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ê–Ω–∞–ª–∏–∑ –º–∞—à–∏–Ω", "–ê–Ω–∞–ª–∏–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π"]
)

# –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
if section == "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
    st.header("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write("**–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:**", len(car_info))
    st.write("**–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π:**", len(driver_info))
    st.write("**–í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫:**", len(rides_info))
    st.write("**–í—Å–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–æ–≤:**", len(fix_info))

    # –ì—Ä–∞—Ñ–∏–∫: —á–∞—Å—Ç–æ—Ç–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø–æ –º–∞—Ä–∫–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø–æ –º–∞—Ä–∫–∞–º")
    model_fix_counts = fix_info.merge(car_info, on='car_id')['model'].value_counts()
    st.bar_chart(model_fix_counts)

# –ê–Ω–∞–ª–∏–∑ –º–∞—à–∏–Ω
elif section == "–ê–Ω–∞–ª–∏–∑ –º–∞—à–∏–Ω":
    st.header("–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ–µ–∑–¥–æ–∫ –ø–æ –º–æ–¥–µ–ª—è–º
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ–µ–∑–¥–æ–∫ –ø–æ –º–æ–¥–µ–ª—è–º")
    model_riders = car_info.groupby('model')['riders'].sum().sort_values(ascending=False)
    st.bar_chart(model_riders)

    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", car_info['model'].unique())
    filtered_cars = car_info[car_info['model'] == selected_model]
    st.write(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—à–∏–Ω –º–∞—Ä–∫–∏ **{selected_model}**: {len(filtered_cars)}")

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –º–∞—à–∏–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—Ä–∫–∏
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –º–∞—à–∏–Ω")
    st.bar_chart(filtered_cars['car_rating'].value_counts())

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—à–∏–Ω
    st.subheader("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω –ø–æ –¥–Ω—è–º –¥–æ —Ä–µ–º–æ–Ω—Ç–∞")
    sort_order = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", ["–í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ", "–£–±—ã–≤–∞–Ω–∏–µ"])
    sorted_cars = car_info.sort_values(by='target_reg', ascending=(sort_order == "–í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ"))
    st.dataframe(sorted_cars)

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
    car_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è", car_info['car_id'].unique())
    selected_car = car_info[car_info['car_id'] == car_id]
    st.write(f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ (ID: {car_id})**")
    st.table(selected_car)

# –ê–Ω–∞–ª–∏–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π
elif section == "–ê–Ω–∞–ª–∏–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π":
    st.header("–ê–Ω–∞–ª–∏–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    st.write("–ü–æ–ª: **0 = –ú—É–∂—á–∏–Ω–∞**, **1 = –ñ–µ–Ω—â–∏–Ω–∞**")

    # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —á–∏—Å–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
    st.subheader("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —á–∏—Å–ª—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    sort_order = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", ["–í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ", "–£–±—ã–≤–∞–Ω–∏–µ"])
    sorted_drivers = driver_info.sort_values(by='user_time_accident', ascending=(sort_order == "–í–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ"))
    st.dataframe(sorted_drivers)

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –ø–æ–ª—É
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –ø–æ–ª—É")
    gender_ratings = driver_info.groupby('sex')['user_rating'].mean()
    st.bar_chart(gender_ratings)

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
    age_ratings = driver_info.groupby('age')['user_rating'].mean()
    st.line_chart(age_ratings)

    # –ì—Ä–∞—Ñ–∏–∫: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Å—Ç–∞–∂—É
    if 'first_ride_date' in driver_info.columns:
        driver_info['experience_years'] = pd.to_datetime('2025-01-01') - pd.to_datetime(driver_info['first_ride_date'])
        driver_info['experience_years'] = driver_info['experience_years'].dt.days // 365
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —Å—Ç–∞–∂—É")
        exp_ratings = driver_info.groupby('experience_years')['user_rating'].mean()
        st.line_chart(exp_ratings)

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ ID
    user_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ ID –≤–æ–¥–∏—Ç–µ–ª—è", driver_info['user_id'].unique())
    selected_driver = driver_info[driver_info['user_id'] == user_id]
    st.write(f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ (ID: {user_id})**")
    st.table(selected_driver)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
st.sidebar.info("–î–∞—à–±–æ—Ä–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ üöñ")
